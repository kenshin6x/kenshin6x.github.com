<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: dicas | seisxis dot com]]></title>
  <link href="http://www.seisxis.com/blog/categories/dicas/atom.xml" rel="self"/>
  <link href="http://www.seisxis.com/"/>
  <updated>2012-06-01T00:04:26-03:00</updated>
  <id>http://www.seisxis.com/</id>
  <author>
    <name><![CDATA[Junior Andrade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ferramentas do Desenvolvedor Moderno: Python LiveReload]]></title>
    <link href="http://www.seisxis.com/blog/2012/05/31/ferramentas-do-desenvolvedor-moderno-python-livereload/"/>
    <updated>2012-05-31T22:16:00-03:00</updated>
    <id>http://www.seisxis.com/blog/2012/05/31/ferramentas-do-desenvolvedor-moderno-python-livereload</id>
    <content type="html"><![CDATA[<p>
Esta sem dúvidas é uma ferramenta bastante interessante, ela irá ajudar na tarefa chata de atualizar o navegador sempre que houver uma mudança nos arquivos front-end da aplicação, isto quer dizer, que sempre que você alterar conteúdo de um arquivo, seu browser automaticamente irá ser atualizado, agilizando mais o trabalho. Atualmente é suportado vários tipos de arquivo como: css, less, javascript, coffescript, etc. <a href="https://github.com/lepture/python-livereload" target="_blank">Python LiveReload</a> é o server escrito em python do aplicativo <a href="http://livereload.com" target="_blank">LiveReload</a> disponível atualmente para MacOSX e Windows. Escolhi apresentar esta por ser grátis.
</p>




<p>
    Gostaria de ressaltar, que apesar da ferramenta ser operada através de linha de comando e python, e o próprio desenvolvedor citar "Python LiveReload is designed for web developers who know Python", além de simples pode ser utilizada para qualquer propósito.
</p>




<h2>Instalação</h2>




<p>
    Se você esta em ambiente MacOSX ou Linux, este passo se torna ainda mais simples pois estes sistemas operacionais ja tem Python instalado. Caso seja ambiente Windows basta instalar <a href="http://www.python.org/download/" target="_blank">Python 2.7</a> ou superior. Também recomendo instalação do pacote <a href="http://pypi.python.org/pypi/pip" target="_blank">Pip</a>.
</p>




<p>
Para instalação execute o comando:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install livereload</span></code></pre></td></tr></table></div></figure></notextile></div>

ou

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install install livereload</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>




<h2>Extensão no seu navegador</h2>


<p>
    Será necessário instalar uma extensão no navegador que você utiliza. O download pode ser feito <a href="http://help.livereload.com/kb/general-use/browser-extensions" target="_blank">nesta página</a>.
</p>




<p>
    Para iniciar o servidor que irá escutar as alterações nos documentos, é bem simples, e pode ser feito de duas maneiras: Escutando tudo, ou personalizando com um <a href="https://github.com/guard/guard" target="_blank">guardfile</a>. No caso do uso do guardfile, será necessário ter algum conhecimento em python, citarei um pouco mais a respeito a seguir.
</p>




<h2>Inicializando o servidor normalmente</h2>




<p>
    Para inicializar o servidor escutando tudo, basta executar o seguinte comando:
    
    <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>livereload</span></code></pre></td></tr></table></div></figure></notextile></div> 

    Em seguida deve-se acionar no botão da extensão <img src="/images/posts/pic1.jpg" title="Botão da extensão do LiveReload" > instalado no seu navegador. Caso seu navegador seja Google Chrome, e você estiver fazendo isto localmente, é necessário marcar o checkbox: Allow access to file URLs.
</p>




<p>
    <img src="/images/posts/pic3.jpg" title="Extensão LiveReload no Google Chrome" >
</p>




<p>
    Caso seu terminal fique semelhante como a figura abaixo, tudo deu certo, experimente alterar documentos que estão abertos no seu navegador para notar que as mudanças ocorrem imediatamente, sem necessidade de atualizar a página manualmente.
</p>




<p>
      <img src="/images/posts/pic2.jpg" title="Terminal com LiveReload rodando" >
</p>




<h2>Guardfile</h2>




<p>
    Desta maneira, o poder da ferramenta vai além do que foi citado até aqui. É possível criar funções para executar tarefas mais complexas, como por exemplo compilar seu script .less para .css antes que o navegador seja atualizado ou definir quais arquivos ou tipos serão escutados pelo servidor. Neste ponto, vale apena ler a <a href="http://livereload.readthedocs.org/en/latest/guardfile.html" target="_blank">documentação oficial</a> para maior compreendimento. Para maior aproveitamento é necessário conhecimento em python.
</p>




<p>
Para exemplo, iremos criar um guardfile em que apenas os documentos .html e .js serão escutados pelo servidor:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>guardfile.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">livereload.task</span> <span class="kn">import</span> <span class="n">Task</span>
</span><span class='line'>
</span><span class='line'><span class="n">Task</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#39;*.html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Task</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#39;/static/js/*.js&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>

<p>
Para inicializar o servidor com o guardfile, basta executar o como mostrado abaixo, ao invés da maneira anterior.

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>livereload /caminho/do/meu/guardfile.py</span></code></pre></td></tr></table></div></figure></notextile></div> 
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solução para encode de caracteres com PHP]]></title>
    <link href="http://www.seisxis.com/blog/2012/05/30/solucao-para-encode-de-caracteres-com-php/"/>
    <updated>2012-05-30T22:50:00-03:00</updated>
    <id>http://www.seisxis.com/blog/2012/05/30/solucao-para-encode-de-caracteres-com-php</id>
    <content type="html"><![CDATA[<h2>O Problema</h2>


<p>
Tratar de caracteres sempre é um problema quando se diz respeito ao encode. 
Em algumas situações, somos remetidos a lidar com dados de bases diferentes onde o encode também é diferente, porém precisamos trata-los igualmente, seja para apresentação, persistência ou qualquer outra finalidade.
</p>


<p>É ideal que entendamos o funcionamento a tabela de encodes, para isso segue uma artigo interessantíssimo feita pelo site Tableless: <a href="http://tableless.com.br/charsets-e-encodes-tabelas-de-caracteres/">Entenda como funciona a tabela de caracteres e encodes no HTML</a>.
</p></p>

<h2>Certo, mas e a solução?</h2>


<p></p>

<p>
Bem, escrevi uma função hà um tempo atrás para resolver justamente este tipo de problema. 
Desta forma, temos uma função capaz de encodar objetos sejam eles classes, arrays ou strings.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>charset_transfer.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Funcao para encodar/decodar (charset) texto.</span>
</span><span class='line'><span class="sd"> * Suporta array multidimensional</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author kenshin6x &lt;seisxis@gmail.com&gt;</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @param mixed $input Valor a ser encodado/decodado. Caso seja um objeto, é necessario que seus atributos sejam publicos, e neste caso, o retorno sera uma copia do objeto, mantendo nome e atributos</span>
</span><span class='line'><span class="sd"> * @param string $function Nome da funcao a ser usada para transferir.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @return mixed $return</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">charset_transfer</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span><span class="nv">$function</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="nb">gettype</span><span class="p">(</span><span class="nv">$input</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;string&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$return</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span><span class="nv">$input</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;array&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$val</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$return</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span><span class="nv">$val</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$returnTemp</span> <span class="o">=</span> <span class="nx">charset_transfer</span><span class="p">(</span><span class="nv">$val</span><span class="p">,</span><span class="nv">$function</span><span class="p">);</span>
</span><span class='line'>                    <span class="nv">$return</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$returnTemp</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;object&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$inputVars</span> <span class="o">=</span> <span class="nb">get_object_vars</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$className</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$classInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$className</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$inputVars</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$val</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$classInstance</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span><span class="nv">$val</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$returnTemp</span> <span class="o">=</span> <span class="nx">charset_transfer</span><span class="p">(</span><span class="nv">$val</span><span class="p">,</span><span class="nv">$function</span><span class="p">);</span>
</span><span class='line'>                    <span class="nv">$classInstance</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$returnTemp</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$classInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">die</span><span class="p">(</span><span class="s2">&quot;charset_transfer ERROR: TYPE UNSUPPORTED&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

]]></content>
  </entry>
  
</feed>
